[{"content":"Sub Title hogehoge\n","permalink":"https://konumaru.com/posts/pca%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E7%95%B0%E5%B8%B8%E6%A4%9C%E7%9F%A5/","summary":"Sub Title hogehoge","title":"PCAを使った異常検知"},{"content":"コンペ概要 ざっくりの概要はサッカーの試合動画(45min * 2) から特定のフレームで Challenge, Play, Throwin の３つのイベントを予測するというもの\n（合っているか不安だが、）サッカー業界の事情としては、ユース、プロ、セミプロなど は手厚い指導を受けられるが、それ以外のプレイヤーは質の良い指導を受けられるほど人 材は充実していない。\nこれを画像処理の技術によって試合中の選手の活動状況を把握することで少ない人的コス トで選手に有益なアドバイスをできないか、という取り組み。\n評価指標 公式の説明 はここ\nsubmission file は以下 Columns を必要とした csv ファイルを提出する。\n video_id: 動画の識別子 time: event が発生した動画内の時間 event: challenge, play, throwin の内、発生したイベントを１つ score: イベントが発生した確率（後に Average Precision を算出するときに使う）  このコンペの評価を簡単に説明すると以下のような計算を行います\n 各 event について Average Precision を計算 その際に下記の Tolerances (許容度)に従い、正解ラベルとの time の誤差以内であれ ば正解とする  つまり１つのラベルで time の誤差０であれば５回予測できたとする   最後に３つの event の Average Precision の平均値を評価指標とする  # Tolerances Challenge: [ 0.30, 0.40, 0.50, 0.60, 0.70 ] Play: [ 0.15, 0.20, 0.25, 0.30, 0.35 ] Throw-In: [ 0.15, 0.20, 0.25, 0.30, 0.35 ] 本コンペで難しいと感じた部分  データが動画  動画によってカメラの画角が捉えてる範囲が異なる 客席も映像に入ってる   コードコンペだったので CPU/GPU 共に 9 時間の制限がある Discussion の情報が乏しい（画像処理の経験が浅いのでつらかった）  （ここの言語化ができてない時点で負けている感がある\u0026hellip;.）\n自分が取り組んだ内容 当時のRepository\n(Private にしていると思うので見れません。)\n Yolov7 で ball, person の x,y,conf を取得 時系列テーブルデータとして特徴量エンジニアリング  ball の xy 座標と confidence 予測対象フレームの-20~20 のフレーム前後の ball の xy 座標と confidence 予測対象フレームの-20~20 のフレームで rolling した ball の xy 座標と confidence の統計量 予測対象フレームの-20~20 のフレーム間で ball が移動したベクトルの内積と角度 検出された person 全員の座標の統計量   XGBoost で学習、損失関数は LogLoss Group=game_id(video_id から前半後半を統合), k=3 の GroupKFold で評価  結果は、ローカルで 0.2 と戦えるスコア出なかった\nplay だけは 0.7 近く予測できたが、challenge と throwin は 0.02 程度だった\n上位解法 1st Solution  4 つの動画を固定で検証用に使った 1024*1024 のグレースケールで前後のフレームを使った 3 チャンネルの画像を使用  処理速度を考慮   efficientnetv2_b0, efficientnetv2_b1 を使用  3dcnn は pooling 前の最終ブロックと最後の畳み込み層のみ 小さいデータセットに対して過学習することはすぐに分かった   損失関数は３つのカラムで BCE  ダミーデータはどうしてたんだろう？   マルチスレッド化して推論を高速化  １つの video で 25 min であり、モデルを 2 つしようしたので 50 min 最終的には全体で 5 hours    2nd Solution  オプティカルフロー  オプティカルフローを予測？ RAFT というアイデアを使ってる   ボールの検出  対象フレームの RGB、前後のオプティカルフローのブレームの RGB の合計 9channel を使用  検出された Ball のヒートマップの内、上位 10 に厳選     ボール軌道のコスト最小化  N フレームを対象にボール検出で厳選された 10 の ball から軌道を考慮すると尤も らしいものを選定   イベント分類  ボール周辺の画像をトリミングしたものを使用 2D CNN + Ball 軌道特徴量 -\u0026gt; 1D CNN -\u0026gt; 4 Event Class Prediction（短期予測？） Stacking 51 フレームの簡易的な特徴量から中間の７フレームを対象に予測（長期予測？）   後処理  Play\u0026amp;Pass については７フレームの内？予測値が peek の time を採用 Challenge についてはノイズが多かったので予測値にガウシフィルターを適用後同様 の処理でイベント発生 time を選定    3rd Solution  EfficientNet + Simple 1D UNet  input=(1, 64, 3, 360, 640) 前後に 64 フレームも使ってる！？ 64 フレーム中で score が peek のフレームを採用 Backbone をフリーズさせることで学習を高速化   ボール検出の pretraining  そのまま学習するとオーバーフィットする ボールの位置を教えることで解決 ボールの位置は自分でアノテーションした（自分でアノテーションは頭になかった \u0026hellip;）   ラベルデータの加工  正解ラベルを中心に緩やかに正解にする(0~1 のグラデーションを持たせる)  正解ラベルの周辺フレームは event に近い動きをしているはずなのでそのニュア ンスを表現することでモデルの FalesNegative を抑制してる？     Augmentation  RandomHorizontalFlip, RandomRotation, ColorJitter, etc   Loss Function は、Focal Loss  Challenge と Throwin はデータが少ないので weight を設定することで調整   推論  imutilsで video のデコードを MultiTread 化  これをつかって動画読み込みむだけで早くなるってことなのか？     後処理  NSM の閾値に[12, 6, 6] for [challenge, play, throwin]と言ってるがどういう ことなのだろう    5th Solution  グレースケール、size=(1024,576), crop_center(960,512) 前フレームとの差 前後 5 フレームの effecientnet_b1 による 3 クラス分類 5 モデルのアンサンブル(CV したモデル) ラベルデザイン  σ=20 フレームのガウス分布  前後 20 フレームについてガウス分布にしたがって緩やかにラベルを付与したって ことだろうか      上位を取るために  そもそも NN を使うということ  Efficientnet, UNet について要復習 入力の３次元は RGB の color channel だけでなく、時間軸にも使える   検証データを固定した試行錯誤の時間の削減  最初は画像サイズを小さくなども   ガウス分布を使ったラベルの重みづけ 動画読み込みの並列化による推論の高速化 既存のライブラリやモジュールを活用したスタートラインを高く持つ志  諸刃の剣かもしれんが、少なくとも画像コンペにおいては\u0026hellip;？    お気持ち 「知っていて出来なかったこと」と「知らなくて出来なかったこと」があったように感じ た\n知っていてできなかったことは、今回の問題と紐づかなかったのでどうすればよいのか難 しいが、少なくとも知らなかったことは知っているに変えたい\n","permalink":"https://konumaru.com/posts/kaggle%E3%82%B3%E3%83%B3%E3%83%9A-dfl%E5%8F%8D%E7%9C%81%E4%BC%9A/","summary":"コンペ概要 ざっくりの概要はサッカーの試合動画(45min * 2) から特定のフレームで Challenge, Play, Throwin の３つのイベントを予測するというもの （合っているか不安","title":"kaggleコンペ DFL反省会"},{"content":"気をつけることリスト  目標を聞き出す  最初の質問としても有効 相手の理想を聞き出せるような切り口の質問をする  どういう状態が理想ですか？ ベストってどんな感じですか？ 何も制約がなかったらどうしたいですか？     目標に対する進捗  進捗がないのなら障害について深ぼる   圧倒的承認！！！  良かったことはおうむ返ししておく  相手にとって良かったことには承認をする   承認と共感は違う！  頷くだけでは承認じゃない、おうむ返しは承認度が上がる   承認が足りない！！！！   感情を引き出す  オープンクエッション  どんな様子でしたか？   表情を伝える    Tips  質問がクローズドになってはいませんか？ 会話の中で感情が出ているときには丁寧に扱ってあげたい  質問ポイントとして、相手の感情が出ているところは敏感に反応できるようにする   Next Action はいくつも出していい  ","permalink":"https://konumaru.com/posts/%E3%82%B3%E3%83%BC%E3%83%81%E3%83%B3%E3%82%B0%E3%81%A7%E6%B0%97%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B%E3%81%93%E3%81%A8/","summary":"気をつけることリスト 目標を聞き出す 最初の質問としても有効 相手の理想を聞き出せるような切り口の質問をする どういう状態が理想ですか？ ベストってど","title":"コーチングで気をつけること"},{"content":"これを読んで得られるもの PM, Desingner, Developer の間で、何を、何故作るのかの共通認識を作るための手段\nPRD とは  「プロダクトマネージャー本人も含めて、常に立ち返るべき方針」をドキュメントにしたもの ブレの無い意思決定をするため 開発終盤に入り期日も近づいた時の取捨選択を判断する基準  PRD のテンプレート 以下は Product Hunt のものを参照している。\n# Title ## Intro \u0026amp; Goal ## Product Vision ## Who\u0026#39;s it for? ｜誰のためにあるか ## Why build it?｜なぜ創るか ## What is it?｜どういうものか ### Glossary ｜用語 ### User Types ### UI/Screens/Functionalities ｜ UI/画面/機能 ## Brainstormed Ideas ｜その他アイデア ## Competitors \u0026amp; Product Inspiration ｜競合 ## Seeding Users \u0026amp; Content ｜初期ユーザーと獲得戦略 ## Mockups ## Tech Notes PRD を書くステップ  素案を書く  Good Idea をプライベートドキュメントに書いてみる 言語化の過程で自らが間違っていたことに気づくかもしれません Backgroud, Objective, metrics は最低限欲しい  さらに、ユーザーが利用するシナリオ、主要機能を言語化できると素晴らしい     上長の承認を得る  上司の考えやフィードバックを入手するのが目的  自分よりもドメイン知識を豊富に持っている人の意見は貴重です   また情報の透明性にも繋がります   デザイナーと共有  エンジニアリングについて語る前にユーザーに触れさせるのが懸命です デザイナーの意見を積極的に仕様に反映させましょう   エンジニアと共有  （理想的には）デザイナーとエンジニアのリーダーと PRD を共有し、フィードバックを得ます 技術的に実現可能なものを見つけ、大まかな時間・難易度の見積りを行う   プロダクトチーム全体に共有  この時点で正式に会社の wiki に PRD を移動 チームから得た質問や情報を PRD に記録していきます  プロダクトチームから良きアイデアが出た場合、初期に実現しないとしてもここにメモします     会社に共有  必要に応じて、プレゼンテーションの材料とすることができます    ","permalink":"https://konumaru.com/posts/prd-what%E3%82%92%E6%B1%BA%E3%82%81%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88/","summary":"これを読んで得られるもの PM, Desingner, Developer の間で、何を、何故作るのかの共通認識を作るための手段 PRD とは 「プロダクトマネージャー本人も含めて、常に立ち返るべ","title":"PRD - Whatを決めるためのドキュメント"},{"content":"経緯  諸事情により、PC を新しくしたところ hugo server がローカルで起動しなくなった よく確認せずに Github Actions へビルドしたら CI は通過したのでローカル環境の問題だと推測した  エラーメッセージ hogehoge\n❯ hugo server -D Start building sites … hugo v0.102.3+extended darwin/amd64 BuildDate=unknown WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for layout \u0026#34;archives\u0026#34; for kind \u0026#34;page\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;term\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;term\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;page\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;term\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;term\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;page\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;term\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;home\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for layout \u0026#34;search\u0026#34; for kind \u0026#34;page\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN 2022/09/13 10:56:07 found no layout file for \u0026#34;HTML\u0026#34; for kind \u0026#34;taxonomy\u0026#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination 対応 原因は、サブモジュールを初期化\u0026amp;更新する必要があった\n\u0026gt; git submodule update --init --recursive 更新するだけでなく、初期化が必要な部分でつまづいた。\n","permalink":"https://konumaru.com/posts/202209%E6%99%82%E7%82%B9%E3%81%A7%E8%B5%B7%E3%81%8D%E3%81%9Fhugo%E3%83%93%E3%83%AB%E3%83%89%E3%82%A8%E3%83%A9%E3%83%BC%E5%AF%BE%E5%BF%9C/","summary":"経緯 諸事情により、PC を新しくしたところ hugo server がローカルで起動しなくなった よく確認せずに Github Actions へビルドしたら CI は通過したのでローカル環境の問題だ","title":"202209時点で起きたHugoビルドエラー対応"},{"content":"「クリストファー・アレクサンダーの思考の軌跡 - デザイン行為の意味を問う」を読んだ感想をまとめる\n形は機能に従う、機能は形に従うのではない 「形は機能に従う」\nこれがこの本の中で最も重要だった言葉だと感じました。\n様々なニーズを満たすものの形は、そのニーズを満たすような機能が先だって定められ、その機能を満たす形がおのずと決まる。ということを言っている。\nデザイナーと自然科学者の対比 本書では扇風機の説明の仕方を例にその違いを対比していた。\nデザイナー観点での扇風機の説明\n 扇風機はその前にいる人を涼しくするという機能を持っている\n クリストファー・アレクサンダーの思考の軌跡 - デザイン行為の意味を問う | 長坂 一郎 (著)\n  自然科学者観点での扇風機の説明\n 扇風機は羽を回転させて（最近は翅のないものもあるが）、一定の風速の空気の流れを発生させるという機能を持っている\n クリストファー・アレクサンダーの思考の軌跡 - デザイン行為の意味を問う | 長坂 一郎 (著)\n  この２つの「機能」の説明は全く異なり、デザイナーの観点からは扇風機が作られた目的が説明されている。\n自然科学者の観点からでは「機能は形に従う」説明になっている。機能に先だって形が存在していることになる。\n例えば、「キリンの高いところにある葉を食べる（機能）から首が長い（形）のだ」のようになる。 （キリンは高いところにしか葉がないから首が長くなったのではなかっただろうか。）\nこの「機能」の捉え方がデザインにとって最も根底にあることだと思われる。\nデザイナーにとっては、形に先だって機能があるという考え方によって再現あるよいデザインをすることができるのではないかとこの本では言われている。\nデザイナーの仕事 デザイナーの仕事は、この「機能」が目的としている「ニーズ」を定義し、分析することにある。（と読み取れた。)\nここでの「ニーズ」は～を求めている。ではなく、～をしようとしている。などの傾向のことを言う。\n本書では「ニーズ」＝「人々がしようとすること」と概念を置き換えている。\nデザイナーはこの「人々がしようとすること」が何らかの理由で実行できないとき、それを様々なモノの粒度や関係性を変えることで、ユーザが実行できる状況を作り出すことが仕事になる。\nこの目指す状況の違いに特定の人、デザイナーならではの個性が現れるのだと思われる。\nオーダーメイドっていいもんなんだな、 この本を読んでオーダーメイドというは、このプロセスをひとり占めできるのだからそれは贅沢なものなのだと気づいた。\n他の誰のためのものでもなく、自分だけのためにニーズを分析して、形を作る。\nこのプロセスを経て作られたものがいいものでない訳がない。\n","permalink":"https://konumaru.com/posts/%E5%BD%A2%E3%81%AF%E6%A9%9F%E8%83%BD%E3%81%AB%E5%BE%93%E3%81%86/","summary":"「クリストファー・アレクサンダーの思考の軌跡 - デザイン行為の意味を問う」を読んだ感想をまとめる 形は機能に従う、機能は形に従うのではない 「形は","title":"形は機能に従う"},{"content":"目標設定のフレームワークとして OKR を採用することにしたので、OKR 導入のために必要な基礎的な知識をまとめる。\nOKR とは 目標の設定・管理方法の１つで、Objective と KeyResults の略称\n勉強のために読んだ本によると、\n 第一の原則は、みんなのモチベーションを高めて最高の仕事をしてもらう方法、 第二の原則は、有意義な形で進捗を測る方法と言える\n OKR（オーケーアール） | クリスティーナ・ウォドキー (著)\n  とも書いてあり、それぞれ Objective と KeyResutls を表していると思われる\nまた OKR は、スタートアップのような小規模のチームから Google のような大企業まで活用することができる目標設定のフレームワークである。\nOKR の決め方 会社のミッションを確認する 世界を変えたいと思って起業された会社にはミッションがあるはずだ。\nミッションを言語化するにあたり以下のようなものが使える\n 私たちは、[価値提案]によって、[市場]における[問題を取り除きます/生活を向上させます]\n OKR（オーケーアール） | クリスティーナ・ウォドキー (著)\n  上記の本では会社を 5 年間支えてくれるようなミッションを設定してね、と言われてる\n市場の変化や会社の方針などによって色々在るが 5 年間は頑張ろうという意味でもあるのかな。\nObjective と Key Results の理解 これはとてもシンプルで前述している通り、Objective と KeyResults のみからなる。\n各項目は以下のような性質を持つ\n Objective  定性的でチームのテンションが上がるような１文にまとめる チームが独立して実行できるものにする 達成のための期間を設定する、例えば四半期や半期などを考えられる   KeyResults  Objective で設定した感覚的なことばを定量化する 達成するのが困難だが、不可能ではないものを設定する    Objective と KeyResults の設定 実はこれの決め方についてはあまり紹介されている書籍やブログなどが見当たらなかった。\n一方で実際に OKR をやってみて思うのは、「実行するチームが Objective を深く理解すること」が最も重要なことだと思った。\nいろいろなワークショップ手法や雑談など何でもいいが、チームが OKR をやることを心から納得していて、設定された Objective を自分にとって達成したいと思えるものに言い換えることができればあとはなんでもよい。\nあとで Good/Bad などまとめるが、それよりも上記を達成することに力を注いだほうが絶対にいい結果になる。\nちなみに会社のミッションの設定から OKR の設定まで 4 時間ほどで完了できたら順調くらいの温度感。\nOKR Tree これは必要な組織のみやれば良い\nまずは会社のミッションから経営層などが OKR を設定し、その KeyResults を下位組織の Objective を同等の関係性になる\nイメージはこんな感じ、\n Mission  会社の Objective 会社の KeyResults  KeyResult 1 (= 部署 1 の Objective)  部署 1 の KeyResult 1 部署 1 の KeyResult 2   KeyResult 2 (= 部署 2 の Objective)  部署 2 の KeyResult 1 部署 2 の KeyResult 2        OKR の Good/Bad とその例  Good 👍  Objective は若干気後れするくらい高いレベルに設定する KeyResults は評価を単純にするために数値化して測定する OKR を組織全体に公開する 会社に来ることが楽しみになるような目標になっている   Bad 👎  個人を評価するために使う タスク管理のために利用する    OKR の運用 毎週月曜日に１週間の仕事を計画し、金曜日にその達成を祝う。というのが基本のリズム\n月曜日の計画でやること  今週の最優先事項の設定 今後 4 週間 OKR の自信度状況の更新 健康・健全性指標の確認  水~木曜日 ここでは計画したことを実行\n金曜日に Win Session 月曜日に計画したことの達成有無を確認する\n達成のためにやったメンバーの素晴らしい仕事や助けられたことなど些細なことでもお互いに褒める\nあまり書籍などには書かれていないが、逆にそうではないことを指摘する場にもなるといいと思う。 （これが褒めることが目的になって馴れ合いっぽくなって改善されないこともあるので）\nOKR を振り返る OKR ははじめ失敗することが当たり前とされている\n最初に設定した期間が終了した時点でその間どうだったかを振り返る\n 設定した Objective は本当に野心的だったか  難易度が低く達成できてしまった 抽象的すぎて日々意識することができなかった etc   運用方法について  KeyResults が計測できる形でなく進捗を計測できなかった 毎週 Objective に近づけるタスクを立てられなかった etc    正直この当たりは実行した組織によっていろいろ在ると思う。\nこれをしっかり運用できるか、失敗を前提としてチームが振り返ることができるかが重要だと感じる。\nなぜ OKR は失敗するのか 参考にした書籍には、OKR 導入の最初は失敗するものだと明言されている。\n実際はわからないが、チームが合意できてなかったり、会社のミッションと関係性が作れていなかったりなどあるだろうが、いずれにしてもそれを四半期で振り返り、改善することができなかったら成功することは無いと思う\nまとめ  まずは正式なフレームに沿って運用するべき 最初は失敗するのが前提 設定した期間が終了したら OKR を振り返り改善することを必ずする  あたりを守っておけばひとまず運用はスタート出来るんじゃ無いかと思った\nあとは Google re:works のブログなど見ると良さそう\n","permalink":"https://konumaru.com/posts/okr%E3%82%84%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8/","summary":"目標設定のフレームワークとして OKR を採用することにしたので、OKR 導入のために必要な基礎的な知識をまとめる。 OKR とは 目標の設定・管理方法の１つで","title":"OKRやるときに知っておきたいこと"}]